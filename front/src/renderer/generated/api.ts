/* tslint:disable */
/* eslint-disable */
/**
 * Squall API Docs
 * SquallのAPIドキュメント
 *
 * The version of the OpenAPI document: v0.0.1
 * Contact: norimaking777@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
import type { RequestArgs } from "./base";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "./base";

/**
 *
 * @export
 * @interface GetEntries200ResponseInner
 */
export interface GetEntries200ResponseInner {
  /**
   * エントリID
   * @type {number}
   * @memberof GetEntries200ResponseInner
   */
  id: number;
  /**
   * エントリのURL
   * @type {string}
   * @memberof GetEntries200ResponseInner
   */
  url: string;
  /**
   * エントリが既読かどうか。trueが、falseが既読を表す
   * @type {boolean}
   * @memberof GetEntries200ResponseInner
   */
  is_done: boolean;
}
/**
 *
 * @export
 * @interface GetRoot200Response
 */
export interface GetRoot200Response {
  /**
   * サーバステータス。固定
   * @type {string}
   * @memberof GetRoot200Response
   */
  status: string;
  /**
   * 実行モード
   * @type {string}
   * @memberof GetRoot200Response
   */
  env: string;
  /**
   * APIバージョン
   * @type {string}
   * @memberof GetRoot200Response
   */
  version: string;
}
/**
 *
 * @export
 * @interface GetRootDefaultResponse
 */
export interface GetRootDefaultResponse {
  /**
   * HTTP status code
   * @type {number}
   * @memberof GetRootDefaultResponse
   */
  code: number;
  /**
   * HTTP status message
   * @type {string}
   * @memberof GetRootDefaultResponse
   */
  message: string;
}

/**
 * EntryApi - axios parameter creator
 * @export
 */
export const EntryApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * エントリ一覧
     * @summary エントリ一覧
     * @param {number} [size] 取得件数
     * @param {Array<number>} [ignoreIds] 取得結果から排除するID。取得件数は排除した結果の件数とする
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntries: async (
      size?: number,
      ignoreIds?: Array<number>,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/entries`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      if (ignoreIds) {
        localVarQueryParameter["ignore_ids"] = ignoreIds;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * エントリを既読にする
     * @summary エントリ既読化
     * @param {number} entryId 対象のエントリID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postDoneEntry: async (
      entryId: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'entryId' is not null or undefined
      assertParamExists("postDoneEntry", "entryId", entryId);
      const localVarPath = `/entries/{entry_id}/done`.replace(
        `{${"entry_id"}}`,
        encodeURIComponent(String(entryId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * EntryApi - functional programming interface
 * @export
 */
export const EntryApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = EntryApiAxiosParamCreator(configuration);
  return {
    /**
     * エントリ一覧
     * @summary エントリ一覧
     * @param {number} [size] 取得件数
     * @param {Array<number>} [ignoreIds] 取得結果から排除するID。取得件数は排除した結果の件数とする
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEntries(
      size?: number,
      ignoreIds?: Array<number>,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<GetEntries200ResponseInner>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getEntries(
        size,
        ignoreIds,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["EntryApi.getEntries"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     * エントリを既読にする
     * @summary エントリ既読化
     * @param {number} entryId 対象のエントリID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postDoneEntry(
      entryId: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetEntries200ResponseInner>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postDoneEntry(
        entryId,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["EntryApi.postDoneEntry"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
  };
};

/**
 * EntryApi - factory interface
 * @export
 */
export const EntryApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = EntryApiFp(configuration);
  return {
    /**
     * エントリ一覧
     * @summary エントリ一覧
     * @param {number} [size] 取得件数
     * @param {Array<number>} [ignoreIds] 取得結果から排除するID。取得件数は排除した結果の件数とする
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntries(
      size?: number,
      ignoreIds?: Array<number>,
      options?: any,
    ): AxiosPromise<Array<GetEntries200ResponseInner>> {
      return localVarFp
        .getEntries(size, ignoreIds, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * エントリを既読にする
     * @summary エントリ既読化
     * @param {number} entryId 対象のエントリID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postDoneEntry(
      entryId: number,
      options?: any,
    ): AxiosPromise<GetEntries200ResponseInner> {
      return localVarFp
        .postDoneEntry(entryId, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * EntryApi - object-oriented interface
 * @export
 * @class EntryApi
 * @extends {BaseAPI}
 */
export class EntryApi extends BaseAPI {
  /**
   * エントリ一覧
   * @summary エントリ一覧
   * @param {number} [size] 取得件数
   * @param {Array<number>} [ignoreIds] 取得結果から排除するID。取得件数は排除した結果の件数とする
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EntryApi
   */
  public getEntries(
    size?: number,
    ignoreIds?: Array<number>,
    options?: RawAxiosRequestConfig,
  ) {
    return EntryApiFp(this.configuration)
      .getEntries(size, ignoreIds, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * エントリを既読にする
   * @summary エントリ既読化
   * @param {number} entryId 対象のエントリID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EntryApi
   */
  public postDoneEntry(entryId: number, options?: RawAxiosRequestConfig) {
    return EntryApiFp(this.configuration)
      .postDoneEntry(entryId, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * MiscApi - axios parameter creator
 * @export
 */
export const MiscApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * ヘルスチェック
     * @summary ヘルスチェック
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoot: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * MiscApi - functional programming interface
 * @export
 */
export const MiscApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = MiscApiAxiosParamCreator(configuration);
  return {
    /**
     * ヘルスチェック
     * @summary ヘルスチェック
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRoot(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetRoot200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getRoot(options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["MiscApi.getRoot"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
  };
};

/**
 * MiscApi - factory interface
 * @export
 */
export const MiscApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = MiscApiFp(configuration);
  return {
    /**
     * ヘルスチェック
     * @summary ヘルスチェック
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoot(options?: any): AxiosPromise<GetRoot200Response> {
      return localVarFp
        .getRoot(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * MiscApi - object-oriented interface
 * @export
 * @class MiscApi
 * @extends {BaseAPI}
 */
export class MiscApi extends BaseAPI {
  /**
   * ヘルスチェック
   * @summary ヘルスチェック
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MiscApi
   */
  public getRoot(options?: RawAxiosRequestConfig) {
    return MiscApiFp(this.configuration)
      .getRoot(options)
      .then((request) => request(this.axios, this.basePath));
  }
}
