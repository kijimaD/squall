// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xWX2sbRxD/KmLax6t0bgkJ91SDQitIirHdvLSibE5raZ273cvuStiYA98dhIa4paT/",
	"0rQl2KRVYmO1EApOG+iHWTv1Yz9C2V3dnS2dZVHyInR7M7/5zW9mZ24LfBZGjGIqBXhbwLGIGBXYPFxx",
	"3RaVmFMUrGA+wPw654zrNz6jElOp/6IoCoiPJGG0sS4Y1Wd4A4VRgK1lB4N3xXUdCLEQqIvBgxy1ZmFr",
	"Fjd2QPg9HCLt9zbHa+DBW42SX8O+FY2bFmh5zBXiOHagg4XPSaR5gKep1yqj1I6Pvnj96EuV7Kv0mcqe",
	"q+yVDqyxrlPJic38kvzmo5njVdAzsV+o7HOV7R8fbZ/+OsxJLDMm3xgDA1YVPnuksgOVvlRZotKhyjKV",
	"/gZxUQCjwRk5iMShmCfdTZ2G3Ix0kRHnyDzbF94WRJxFmMsctDMXYqupMYj4rMMons9DNLWpZkJkMJ/P",
	"qrGMHejzYC6Hj5dvGME4vtsnHHfA+0RnZAHyyCXvdiELu72OfVno0mrqcBd3R6sJDoSEkrAfgucWMIRK",
	"3MW8xLFJz8RSyc7r7/dO9w9V8kAlz1VyT//ZTiXvY5XsqO1kDQUCl2bpw9PdZyr5AYqwtxkLMKJF2NVc",
	"4VlRRyr9W6VPzeOBTgdt3MC0K3vgLbhumZOQnNBuga0lvgxZ28wHOJjGOhk9Od3dUdmeyl6p7P4UUAXO",
	"5OiZ6mo77yYjfbi6ulQTEsm+qBmLqjoW83GWd240xW2iF8dRcvOq/stHzfkEsFVq9gUYmGFtGF1mvGKt",
	"YgcGmAtix9csh1tjs8mMxuEcw7BEq8pspWA22Tx/mFJ/ZUbfPf1fd+ZLtZ2e/PjnyejxPC1wq0zjPPri",
	"UktDa9AjlQ1V9qKiSnqW0TWWj3jkmxLgEJEAPKCMkxDdIbR79erV97v6tO6zEBygKNQ4d8g6CVEHpkb6",
	"yt0+CgKVjAyL+yo9VNkvKtu1l+VTWsyk3LS2uNSqNZkvzmjpwcCtu/UFDc8iTFFEwIP36gt1FxyIkOwZ",
	"URv6p4tlhcCVi8WAcbPAWh3w4AMsTe855z833nXdi3qjsGsUO9IosIb6gbzc6YIPGbPw+mGI9Hq6kLtE",
	"XaH77yYRPrS1TwOXq7Fahun1XqFBvmD/rwzF98UbV6KKfi6D3eZt08nCQOjj6UY4NBfhQGUH/zz8/WQv",
	"W1xqjbejBz0pI6/RCJiPgh4T0rvmXnMhbhdRJuEWVPLUTnuVDM1O+lalOyp9oLLH9sKVV8QSdGDjnQ4R",
	"UYA2P7Ln/z75+qezmUHsTLFOflbJ6Piv70o0U/UqsG+GpXXcjv8LAAD//z/U5A1JCwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
