// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/4xUXYscRRT9K83Vx3a6Vwkb+skFFx1IZNiJedF5KHtqe2rTXdWpqhl2CA12F0iiUYJf",
	"hKgsG5SJWTIKQYga8MfcTMyjP0Gqej4yHxn3aWqqb517zr3n3hsQiywXnHKtILoBkqpccEXdnwth2OSa",
	"Sk7SNpUDKvelFNJ+iQXXlGt7JHmesphoJnhwpAS3d/SYZHlK68guhehCGPqQUaVIQiGCGapXw3o1buGD",
	"ins0I/bd65IeQgSvBQt+Qf1VBZdroIMpVyiKwocuVbFkueUBkaXubcziPXvyxfO7X2L5EKsHaH5B8xSK",
	"eWYne58P7M8y4GR88uL0Npr7aJ6iuQU+ZOT4EuWJ7kG0Y+XpYW61KS0ZT6yYd6k+EEJbmhYvlyKnUrO6",
	"trROsk2m5WGZaaL76v+C23VU4cOASsXqPmx7cHUaZsVLer3PJO1C9OEsne8YLtA6c4Hi4yMaa5tptQ9r",
	"Iuvmr5byvStXWl6dxnMRc2jGNU2oc8LcLNtez4LWir+iaZplFr5JS3te5eV0WP3uOn4Hqz/QfGrP1d/2",
	"/Ek1+f7PyfjeeZxwddGSZfS9VtNCW9AnaEZoHm/QUvjA+KGYzR2J3dzRjLAUIuBCsoxcYzzZ3d19O7G3",
	"jVhk4AMnmcW5xo5YRrqwNiPt632SpliOHYtbWD1C8zOaUzSP0dz8iFsqTNsxnoZ6e62m946I1Uu+iGAQ",
	"NsLGjoUXOeUkZxDBW42dRgg+5ET3XFEDKYSjnVC9ocjmLpozV+ESqxEag9Wv4ACl2yzNLkSzeQJ/eUu9",
	"GYbnWEnn2ywvj+yGrfL85p3JZyd1JQ9JP9WvwpsTDF6xQ93K6WcZkcMt+jVJlPXvZaZi6DhCyoHY2/Ui",
	"PnJGOkNz9s9Xv03um71WE3zoS2uTntZ5FASpiEnaE0pHF8OLIRSdeZJVuB0sf8Jy/MHBJSxHL04fYPkt",
	"Vrex+hzNvdqwC4vtcy2H4MPxG12m8pQM36/v/z35+ge3Zq2h0DyEwl9jXf6I5fjZX98t0JzaTWDfjBbR",
	"Raf4LwAA//8eEFdCvAYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
