// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7yW3WobRxSAX0Wc9nJrrVtCwl7V4NAKkmJsNzetKZPVWBpnd2YzMxIWYcG7CyFp3BLS",
	"vzRtMTZpldhYLYSC0wb6MGO5vuwjlJnRrmRpLemmvRGj0Tnf+Znzo3vgszBiFFMpwLsHHIuIUYHNlyuu",
	"W6MSc4qCNczbmF/nnHH9i8+oxFTqI4qigPhIEkarW4JRfYe3URgF2ErWMXhXXNeBEAuBGhg8yKkVi61Y",
	"buyA8Js4RFrvbY43wYO3qkP/qvZXUb1pQasDXyGOYwfqWPicRNoP8LTrlVIrldOTL86efqmSQ5W+UNlL",
	"lb2BuLBswr5OJe/UlvXxItRovFLZA5Ud1pbBgZBQErZC8FwHZCfSoREqcQObYCxHLDOKp7NUsnv23cH5",
	"4bFKHqnkpUru68NOKnkLq2RX7SSbKBB4KJY+Od9/oZLvoTB7m7EAI1qYXScymGm1p9K/VPrcfD3S4aDt",
	"G5g2ZBO8RdcdxiQkJ7RRsD9evTGTrGXmA7YnWf3e3vn+rsoOVPZGZQ8nQCWcD7DUvhEsdFVoJJE4FLMq",
	"aaDWMUpxwUWco84ItpNDI84izCWx/UHqs/h5KcUOEPFZfVAJszVs0WiH8necqWNfPHagxYO5FPQT6crn",
	"+G6LcFwH7xMdkQXklod+bxTZYbe3sC8H6VllTJZnB9unne5H23S9RLI1863WrFTsQBtzQeykmaZwayA2",
	"HuTAnGM8HNLKAhyfNBNB2vE2XsAfrq+vVKyZipEoGw/FOJymnQtNlPxYTAMruXhZLGtFlsc793fTZ49V",
	"+lpl9/VZj4XXaift//BHv/dsnv67NXySi/SllZpGa+iJyroqe1USi24PusnyzYJ8s1lwiEgAHlDGSYju",
	"ENq4evXq+w19u+CzEBygKNScO2SLhKgOE1tg7W4LBYFKesaLhyo9VtnPKtu3k+pTWpR5LlpZWqlVlpkv",
	"RurCg7a74C4sajyLMEURAQ/eW1hccMGBCMmmSWpVfzSwLElw9lRlRya7iUq7KstU+isYGDd7s1YHL+8l",
	"cC7u4Hddd46FO9/eHG3Xkp159uBx//M9m8VN1ArkZbzCweol/xDMQm2FIeKdKfFL1BC6dm8S4cOG1qli",
	"O8MvT+XIljk92Tn/pVuWx8Em+I9TObpv/s9slqUgT6UZ7DqXWsUg9PVkQR6bhjxS2dHfT37rH2RLK7XB",
	"4PegKWXkVasB81HQZEJ619xrLsQbhZVx3KJKntuVr5Ku+WPyjUp3VfpIZc9s4w9b1TrowPY7dSKiAHU+",
	"svf/7H3142hkEDsTXic/qaR3+ue3Q5qpnDLY192hdLwR/xsAAP//9FIQKeYKAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
