// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xXUU/cRhD+K6dpH13OpEJEfirSRe1JSYWA5iVF0ea8HEvstdndQ1B0EralqAiaRrQJ",
	"SZoWgWhJQJBIUSrSRu2PWSD0rT+h2t2zfdyZu1OVl5Ptnfnmm29nZ/aWoRb4YUAxFRycZQgRQz4WmOk3",
	"UqcBw1VXv7iY1xgJBQkoOHD6/aPTvzbfv3lw9sszGa3JePXs/sY/T3Zl9ETGa9WKXImNycmfv589fCWj",
	"l+n6poy2Ur+jdPW58QMLiEKfb2C2BBZQ5GNwWjxuE5eDBbw2i32k6Qnsa2o+ocRv+ODYFoilULtQgeuY",
	"QTP7ghhDS9BsWsDJN/iyjAyhS3hox3YGLp5BDU+Ac8W2wEeLhsWwrd56cFIkGOZhQDnWCYzYdpUKzCjy",
	"JjFbwOwaYwFTK7WACkyFekRh6JEaUnTLc1xxXga8iPzQw8bSxeCM6NiYc1RXIVPUkoEtGdxmew4fMzwD",
	"DnxUziuhbFZ5+YYBmmhxNcwvyjZi26XCKKWT4+/OHt+X0b6Mn8vkhUzeqcAK6xoVjJjM++Q3GM0Ur4Ce",
	"jv1aJt/KZP/keOX8t72UxEQQiA/GQIMVhU8ey+RAxm9lEsl4TyaJjF+aIjSeCrhNjqyk+6W71F3ZFpgF",
	"dYxZEGImUlB3IMRqRWEQftsNKB7Mg1eUqWJChDeYz5S2bFrQYN5ADl9NXAdzYOYbhGEXnFsqIwOQRs55",
	"T2eyBHfmcE1kulQr3We+vTqqFbD6dJL2pHtiyWj9bHPnfP9QtcbohYzuqYeVWLAGltG6XIlmkMdxbhZv",
	"nG+rHghZ2DtB4GFEs7BTqcK9oh7J+G8Z7+rXA9At6TqmdTGrm1KeExeM0HqGrSTuh6xsBgNcKOitR1vn",
	"2+sy2ZHJO5msdgEV4HS2nq6qNv2uM9IXU1PjJS6QaPCStijax6w/9vJOjbq4ddRiK0pqXlR/aau5mAA2",
	"SvU+AAu6WWtG/YwnjVXTggXMODHtq5fDzZZZZ0atcJZmmKMVZTaZMessnjd6qx/o1ndPPavKfKuuBT/9",
	"cXr0dJASuJmncRF9bLyqoBXosUz2ZPK6YJdUL6MzQdriUU1vAfYR8cABGjDio7uE1kdHRz+rq69DtcDP",
	"Z/1dMkd85EJXS5+cbyDPk9GRZrEq40OZ/CqTbXNYvqZZT0pNS2Pj1VIlqPE2LR1YsIfsoWEFH4SYopCA",
	"A58ODQ/ZYEGIxKwWtax+6lgUCFw4WDQY0wOs6oIDn2Oha6/junHFti+rjcyunM1IrUDrntPP6ZKLjB54",
	"Dd9Hajxdyl2gOlf1d4PwGkwrnzLOR2OxDN3jvUCDdMBaF+63t4qTyU3K+r7XtPra5ffk5vT/lTq7w3xw",
	"tYskSqU2N4ZpfVq4hjDCdBbboT5sBzI5eL/x6nQnGRuvtiawA7NChE657AU15M0GXDhX7au2VqIVpRNu",
	"WEa7ZqLIaE/PvYcyXpfxmkyemkOdH0ND0ILFT1zCQw8tfWm+/7v1w7P2zPQ2dbCOftb/MB7laLqyisB+",
	"3Mutm9PN/wIAAP//PPMbgBcNAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
