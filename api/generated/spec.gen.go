// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RXX0/cRhD/KqdtH11sUkWJ/FSki9qTkuoEaV5ShDbn5Vhie83uHuKKTsK2FBVB04g2",
	"kKRpESgtCYgjVZSKtlH6YZYj9K0fodrds31/zN21pS/I2DO/+c3s7G/mlkGFeAHxkc8ZsJdBACn0EEdU",
	"/Yd8Tuslpyxfyv8dxCoUBxwTH9igdfT27OcdETZF9FzEr0T8pYj3S0VgACw/B5DPAQP40EPA1lAz2AEG",
	"oGihhilygM1pDRmAVeaQByX++xTNAhu8Z2akTP2VmdcUlyJoNAyAqz6hqOSwHFJfb7bebr17/eD0h6ci",
	"XBPR6un9jT8fPxPhYxGtlYpiJdImJ7//cvrwpQiPku9bItxO/JrJ1+faL8lpoYZoPUtK85jBDgOdaWCO",
	"PEXNwz72ah6wLQPweqBcfI6qiIJG+gZSCusqLYa/QOdlpAmdw0M5djJw0CysuRzYlywDeHBJsxi35H8D",
	"OEkSFLGA+AypBC5bVsnniPrQnUJ0EdFrlBIqv1SIz5HP5SMMAhdXoKRrzjPJeRmgJegFLtKWDgL2ZRUb",
	"MQarMmSCWtCwBY3bGLUZbmigyTZXzby7bJctq5AbpXBy/NXpo/si3Fd9+0LEb2RgiSV7DOvMh+Q3es9K",
	"vBx6nXfm5Hjl7Ke9ThL1C6VQH0YgCT1JCL+wyAosL3D8SMQHIvpVxKGI9kQci+hI97/2lMAdJ5HephHS",
	"7L1UBkirGVASIMoTUGdkvTEAZjMO8dFoHqwoTRsGqFF3JI/PJq8DffESWbwNlE5KgCz4dJobuTOPKjxN",
	"rlTs14w+RR6sRJ3MB2KJcP10a/ds/1BKa/hChPfkw0okhVyE62IlnIUuQ5lZtHG2IzUUpGHvEOIi6Kdh",
	"ZfpDYjaljdKx68iv8jmlZFkijFPsVzXgYo5+NrfPdtZFvCviNyJe7QPKwemVl7720ZrWG+mTmzfLBcYh",
	"r7GCssirdaqBg7wToz5uPX3SjpKY5/VIcqe7E0C6UoObc1EJsmI0zHhKWzUMsIgow1onBjncapv1ZtQO",
	"ZyiGGVpeZlMps97mea2O+oHSmHvyOfpDPq9Ere9+azWfjNICt7I0utEnyiUJLUGPRbwn4lc5pyRFw58l",
	"iZbCijoC5EHsAhv4hGIP3sV+9cqVKx9V5duxCvGyeX4Xz2MPOqBPO6cWatB1RdhULFZFdCjiH0W8oy/L",
	"576kgrmcu23TwkS5VCiSCuuopQ0WrTFrbFzCkwD5MMDABh+OjY9ZwFBrmyqqKf9UEc8pcK6CKzCqJkXJ",
	"ATb4GHHVez0rxSXLOq83UjszHUaqAu1dZpjTOcuKmiw1z4NyDpzLncMqk/13A7MKmJY+JspmUH4Z+kd4",
	"Tg2SSWZ07da385PJTEy10zWMoXbZLtyY/relTveUC692XomSUuvR3FVrczn5ndAwk5EbEDak+CLaSKbS",
	"Qbqvdx9EmTAux5uO+U/Pout30H8rc/3/LbKuQ2t9M6/O0kuh6KR7L/WhErUDER+823jZ2o0nyqX2FmKD",
	"Oc4D2zRdUoHuHGHcvmpdtVQp2lF64cZF+ExPbhHuqR3goYjWRbQm4idaPDO5Sw5l6QMHs8CF9U/1+7+2",
	"v3nas6b2sQ6/V7/WNjM0dYPzwL7dy6wb042/AwAA//9gdz54+w4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
