// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xWUU/cRhD+K6dpH13OpEJEfirSRe1JSYUgzUuKoo29HEvstdndQ1B0EralqAiaRrQJ",
	"SZoWgdKSgCCRolS0jdofs0DoW39Ctbtn+7gz3CnKy8lnz3zzzew3M7sEbhhEIcVUcHCWIEIMBVhgpv+R",
	"Bg0Zrnv6j4e5y0gkSEjBgePvHx7/vfHuzf2TX57KeFUmKyf31v99/EzGj2WyWq/J5cSYHP31+8mDVzJ+",
	"mX3fkPFm5neQfX1u/MACotDnmpgtggUUBRicNo9bxONgAXdncIA0PYEDTS0glATNABzbArEYaRcqcAMz",
	"aOVvEGNoEVotCzj5Bp+XkSF0Dg/t2MnAw9Oo6QtwLtkWBGjBsBi21b8LOCkSDPMopBzrBEZsu04FZhT5",
	"k5jNY3aFsZCpL25IBaZCPaIo8omLFN3qLFeclwAvoCDysbH0MDgjOjbmHDVUyAy1YmArBrfVmcPHDE+D",
	"Ax9VCyVUzVdevWaAJtpcDfOzZRux7UpplMrR4Xcnj+7JeFcmz2X6QqZvVWCFdYUKRkzmffIbjGaGV0JP",
	"x34t029lunt0uHz6205GYiIMxQdjoMHKwqePZLonkz9kGstkR6apTF4aERpPBdxRjlzS/dJd7FW2BeaD",
	"amMWRpiJDNQbCLFeUxiE3/JCigfz4DVl2rKgyfyBPL6auApG/XNNwrAHzk1FzwAUwafy3MLbs9gVeXL1",
	"Wm/jdh5xvQZWn3HQyfxCLBmvnWxsn+7uq/kWv5DxXfWwnAjWxDJek8vxNPI5LsyS9dMtNcggD3s7DH2M",
	"aB5Wpd8n5oGy0cPkKqYNMaPHSZEIF4zQhgGcLxliB5unW2sy3ZbpW5mu9ACV4HT3eI98zGDpjvTF9evj",
	"FS6QaPKKtiirdT6ILvLOjHq4demkHSUzL9NI1tNnE8CmUheLc15PRc2on/GksWpZMI8ZJ2ZOXORwo23W",
	"nVE7nKUZFmhlmU3mzLrF80Yf9X09Y+6q5+Qf9bycHP/05/HBk0EkcKNI4yz62HhdQSvQQ5nuyPR1ySmp",
	"oUGnw2yWIlcfAQ4Q8cEBGjISoDuENkZHRz9rqLdDbhgUS/UOmSUB8qBndk7ONZHvy/hAs1iRyb5Mf5Xp",
	"lmmWr6miQoRafm3Tyth4vVILXd5RSwfm7SF7aFjBhxGmKCLgwKdDw0M2WBAhMaOLWlU/DSxKClw6wTUY",
	"05ui7oEDn2Ohtde11y/Z9nnayO2q+TLSFWhfKPo5nXNj0JulGQRI7YFzuQvU4Ep/1wh3YUr5VHGxg8rL",
	"0LtHS2qQbTLrzEXyZnkyhUlVX6xaVl+74kLamnrfUueXhQ9e7bISZaU2q3lKdwvXEKYw3WLb1822J9O9",
	"d+uvjrfTsfF6ezs6MCNE5FSrfugifybkwrlsX7Z1JdpRuuGGZfzMbBQZ7+jd9EAmazJZlekT09RFGxqC",
	"Fix84hEe+WjxS/P+v80fnnZmpo+pi3X8s77KPyzQtLLKwH7cKaxbU63/AwAA//8cXOjegAwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
