// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RXX0/cRhD/KqdtH11sUiEiPxXpovakpEKQ5iVFaHNejiW21+zuIa7oJGxLURE0jWgD",
	"SZoWgdKSgDhSRaloG6UfZjlC3/oRqt092/fH3F1b+nLyeWd+85vZ2d+sV0CZeAHxkc8ZsFdAACn0EEdU",
	"/UM+p7WSMylfyv8OYmWKA46JD2zQPH57/vOuCBsiei7iVyL+UsQHpSIwAJbLAeTzwAA+9BCwNdQsdoAB",
	"KFqsYoocYHNaRQZg5XnkQYn/PkVzwAbvmRkpU68y85riUgT1ugFwxScUlRyWQ+rrrebb7XevH5z98FSE",
	"6yJaO7u/+efjZyJ8LKL1UlGsRtrk9Pdfzh6+FOFxsr4twp3Er5GsPtd+SU6LVURrWVKaxyx2GGhPA3Pk",
	"KWoe9rFX9YBtGYDXAuXic1RBFNTTN5BSWFNpMfwFuigjTegCHsqxnYGD5mDV5cC+YhnAg8uaxagl//Xh",
	"JElQxALiM6QSGLOsks8R9aE7jegSotcoJVSulInPkc/lIwwCF5ehpGsuMMl5BaBl6AUu0pYOAvaYio0Y",
	"gxUZMkEtaNiCxq0P2ww3NNBUi6tm3lm2Mcsq5EYpnJ58dfbovggPVN++EPEbGVhiyR7DOvMB+Q3fsxIv",
	"h177mTk9WT3/ab+dRO1SKdQGEUhCTxHCLy2yAssLHD8S8aGIfhVxKKJ9EcciOtb9rz0lcNtOpKdpiDS7",
	"D5UB0moGlASI8gTUGVpvDIDZrEN8NJwHK0rTugGq1B3K47Op60AfvEQWbwOlkxIgCz6T5kbuLKAyT5Mr",
	"FXs1o0eR+ytRO/O+WCLcONveOz84ktIavhDhPfmwGkkhF+GGWA3noMtQZhZtnu9KDQVp2DuEuAj6aViZ",
	"/oCYDWmjdOw68it8XilZlgjjFPsVDbiUo5+NnfPdDRHvifiNiNd6gHJwuuWlp320pnVH+uTmzckC45BX",
	"WUFZ5NU61cB+3olRD7euPmlFSczzeiQ5050JIF2p/s25pARZMRpkPK2t6gZYQpRhrRP9HG61zLozaoUz",
	"FMMMLS+z6ZRZd/O8Vlv9QGnMPfkc/SGfV6Pmd781G0+GaYFbWRqd6BOTJQktQU9EvC/iVzm7JEXDnyOJ",
	"lsKy2gLkQewCG/iEYg/exX5lfHz8o4p8O1ImXjbP7+IF7EEH9Gjn9GIVuq4IG4rFmoiORPyjiHf1Yfnc",
	"l1Qwl3O3ZVqYmCwViqTM2mppgyVrxBoZlfAkQD4MMLDBhyOjIxYw1LVNFdWUPxXEcwqcq+AKjKpJUXKA",
	"DT5GXPVe15XiimVd1BupnZkOI1WB1l1mkNMFlxU1WaqeB+UcuJA7hxUm++8GZmUwI31MlM2g/DL0jvCc",
	"GiSTzOi4W9/OTyYzMdWdrm4MtMvuwvWZf1vq9J5y6dXOK1FSaj2aO2ptriTfCXUzGbkBYQOKL6LNZCod",
	"pvf1zo2Qo03H+6f70PEN9N9KXPt/C6xr0NzYyqux9FIoOunuA32kBO1QxIfvNl829+KJyVLrBmKDec4D",
	"2zRdUobuPGHcvmpdtVQpWlG64UZF+ExPbRHuq/n/UEQbIloX8RMtnJnUJZuy/IGDWeDC2qf6/V873zzt",
	"uqL2sA6/V19qWxmaOr15YN/uZ9b1mfrfAQAA//+9bCgd9w4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
