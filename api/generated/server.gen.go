// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package generated

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ヘルスチェック
	// (GET /)
	GetRoot(c *gin.Context)
	// エントリ一覧
	// (GET /entries)
	GetEntries(c *gin.Context, params GetEntriesParams)
	// エントリ既読化
	// (POST /entries/{entry_id}/done)
	DoneEntry(c *gin.Context, entryId EntryIdParam)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetRoot operation middleware
func (siw *ServerInterfaceWrapper) GetRoot(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRoot(c)
}

// GetEntries operation middleware
func (siw *ServerInterfaceWrapper) GetEntries(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEntriesParams

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", c.Request.URL.Query(), &params.Size)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "ignore_ids" -------------

	err = runtime.BindQueryParameter("form", true, false, "ignore_ids", c.Request.URL.Query(), &params.IgnoreIds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ignore_ids: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEntries(c, params)
}

// DoneEntry operation middleware
func (siw *ServerInterfaceWrapper) DoneEntry(c *gin.Context) {

	var err error

	// ------------- Path parameter "entry_id" -------------
	var entryId EntryIdParam

	err = runtime.BindStyledParameter("simple", false, "entry_id", c.Param("entry_id"), &entryId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter entry_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DoneEntry(c, entryId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/", wrapper.GetRoot)
	router.GET(options.BaseURL+"/entries", wrapper.GetEntries)
	router.POST(options.BaseURL+"/entries/:entry_id/done", wrapper.DoneEntry)
}
