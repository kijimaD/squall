import { app, BrowserWindow, BrowserView, ipcMain } from 'electron';
import path from "path";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

let mainWindow: any

const createWindow = (): void => {
  mainWindow = new BrowserWindow({
    width: 1980,
    height: 1080,
    webPreferences: {
      // タブ領域の renderer プロセスから main プロセスにメッセージを送信するための contextBridge
      // preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      // 読み込めてない
      preload: path.join(__dirname, '../renderer/main_window/preload.js'),
    },
    frame: false,
  });
  mainWindow.setBackgroundColor('gray');
  // mainWindow.webContents.openDevTools();

  {
    const view = new BrowserView({
      webPreferences: {
        preload: path.join(__dirname, '../renderer/main_window/preload.js'),
      }
    });
    mainWindow.addBrowserView(view);
    view.webContents.loadURL("https://google.com");
    const bound = mainWindow.getBounds();
    view.setBounds({x: 200, y: 0, width: bound.width, height: bound.height});
  }
  {
    const view = new BrowserView({
      webPreferences: {
        preload: path.join(__dirname, '../renderer/main_window/preload.js'),
      }
    });
    mainWindow.addBrowserView(view);
    view.webContents.loadURL("https://amazon.com");
    const bound = mainWindow.getBounds();
    view.setBounds({x: 200, y: 0, width: bound.width, height: bound.height});
  }
  {
    const view = new BrowserView({
      webPreferences: {
        preload: path.join(__dirname, '../renderer/main_window/preload.js'),
      }
    });
    mainWindow.addBrowserView(view);
    view.webContents.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
    view.setBackgroundColor('white');
    const bound = mainWindow.getBounds();
    view.setBounds({x: 0, y: 0, width: 1080, height: bound.height});
  view.webContents.openDevTools();
  }
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

function switchView(url: string) {
  const views = mainWindow.getBrowserViews().filter(view => view.webContents.getURL().includes(url));
  console.assert(views.length === 1);
  mainWindow.setTopBrowserView(views[0]);
}

ipcMain.handle('tab1', e => {
  switchView('google.com');
});

ipcMain.handle('tab2', e => {
  switchView('amazon.com');
});

ipcMain.handle('hello', (name: string) => {
  return "a";
});
